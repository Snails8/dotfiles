"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformOas2Service = void 0;
const json_1 = require("@stoplight/json");
const pickBy = require("lodash.pickby");
const guards_1 = require("../guards");
const context_1 = require("../oas/context");
const service_1 = require("../oas/service");
const utils_1 = require("../utils");
const securities_1 = require("./transformers/securities");
const servers_1 = require("./transformers/servers");
const transformOas2Service = ({ document }) => {
    var _a;
    const ctx = (0, context_1.createContext)(document);
    const httpService = service_1.transformOasService.call(ctx);
    if ((_a = document.info) === null || _a === void 0 ? void 0 : _a.license) {
        httpService.license = {
            ...document.info.license,
            name: document.info.license.name || '',
        };
    }
    const schemes = Array.isArray(document.schemes) ? document.schemes.filter(guards_1.isString) : [];
    const servers = schemes.map(servers_1.translateToServer, ctx).filter(guards_1.isNonNullable);
    if (servers.length) {
        httpService.servers = servers;
    }
    const securitySchemes = (0, utils_1.entries)(document.securityDefinitions)
        .map(([key, definition]) => {
        return (0, json_1.isPlainObject)(definition) ? securities_1.translateToSingleSecurity.call(ctx, { ...definition, key }) : null;
    })
        .filter(guards_1.isNonNullable);
    if (securitySchemes.length) {
        httpService.securitySchemes = securitySchemes;
    }
    const security = Array.isArray(document.security)
        ? document.security
            .flatMap(sec => {
            if (!(0, json_1.isPlainObject)(sec))
                return null;
            return Object.keys(sec).map(key => {
                const ss = securitySchemes.find(securityScheme => securityScheme.key === key);
                if (ss && ss.type === 'oauth2') {
                    const flows = {};
                    for (const flowKey in ss.flows) {
                        const flow = ss.flows[flowKey];
                        flows[flowKey] = {
                            ...flow,
                            scopes: pickBy(flow.scopes, (_val, scopeKey) => {
                                const secKey = sec[key];
                                if (secKey)
                                    return secKey.includes(scopeKey);
                                return undefined;
                            }),
                        };
                    }
                    return {
                        ...ss,
                        flows,
                    };
                }
                return ss;
            });
        })
            .filter(guards_1.isNonNullable)
        : [];
    if (security.length) {
        httpService.security = security;
    }
    return httpService;
};
exports.transformOas2Service = transformOas2Service;
//# sourceMappingURL=service.js.map