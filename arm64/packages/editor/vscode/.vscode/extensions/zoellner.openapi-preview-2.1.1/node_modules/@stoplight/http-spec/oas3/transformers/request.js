"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.translateToRequest = exports.translateParameterObject = exports.translateRequestBody = void 0;
const json_1 = require("@stoplight/json");
const types_1 = require("@stoplight/types");
const context_1 = require("../../context");
const guards_1 = require("../../guards");
const oas_1 = require("../../oas");
const accessors_1 = require("../../oas/accessors");
const guards_2 = require("../../oas/guards");
const examples_1 = require("../../oas/transformers/examples");
const schema_1 = require("../../oas/transformers/schema");
const utils_1 = require("../../utils");
const guards_3 = require("../guards");
const content_1 = require("./content");
const examples_2 = require("./examples");
const pickBy = require("lodash.pickby");
exports.translateRequestBody = (0, context_1.withContext)(function (requestBodyObject) {
    const resolvedRequestBodyObject = this.maybeResolveLocalRef(requestBodyObject);
    const id = this.generateId(`http_request_body-${this.parentId}`);
    if ((0, guards_3.isRequestBodyObject)(resolvedRequestBodyObject)) {
        return {
            id,
            contents: (0, utils_1.entries)(resolvedRequestBodyObject.content).map(content_1.translateMediaTypeObject, this).filter(guards_1.isNonNullable),
            ...pickBy({
                required: resolvedRequestBodyObject.required,
            }, guards_1.isBoolean),
            ...pickBy({
                description: resolvedRequestBodyObject.description,
            }, guards_1.isString),
        };
    }
    return { id, contents: [] };
});
const translateParameterObjectSchema = (0, context_1.withContext)(function (parameterObject) {
    if (!(0, json_1.isPlainObject)(parameterObject.schema))
        return;
    return schema_1.translateSchemaObject.call(this, {
        ...parameterObject.schema,
        ...('example' in parameterObject ? { example: parameterObject.example } : null),
    });
});
exports.translateParameterObject = (0, context_1.withContext)(function (parameterObject) {
    const kind = parameterObject.in === 'path' ? 'path_param' : parameterObject.in;
    const name = parameterObject.name;
    const id = this.generateId(`http_${kind}-${this.parentId}-${name}`);
    const schema = translateParameterObjectSchema.call(this, parameterObject);
    const examples = (0, utils_1.entries)(parameterObject.examples).map(examples_2.translateToExample, this).filter(guards_1.isNonNullable);
    const hasDefaultExample = examples.some(({ key }) => key.includes('default'));
    return {
        id,
        name,
        style: (0, guards_2.isValidParamStyle)(parameterObject.style)
            ? parameterObject.style
            :
                parameterObject.in === 'query' || parameterObject.in === 'cookie'
                    ? types_1.HttpParamStyles.Form
                    : types_1.HttpParamStyles.Simple,
        examples: [
            !hasDefaultExample && parameterObject.example !== undefined
                ? examples_1.translateToDefaultExample.call(this, 'default', parameterObject.example)
                : undefined,
            ...examples,
        ].filter(guards_1.isNonNullable),
        ...pickBy({
            description: parameterObject.description,
        }, guards_1.isString),
        ...pickBy({
            deprecated: parameterObject.deprecated,
            required: parameterObject.required,
            explode: parameterObject.explode,
        }, guards_1.isBoolean),
        ...pickBy({
            schema,
            content: parameterObject.content,
        }, json_1.isPlainObject),
    };
});
const iterateOasParams = (0, accessors_1.createOasParamsIterator)(oas_1.OasVersion.OAS3);
exports.translateToRequest = (0, context_1.withContext)(function (path, operation) {
    const params = {
        header: [],
        query: [],
        cookie: [],
        path: [],
    };
    for (const param of iterateOasParams.call(this, path, operation)) {
        const { in: key } = param;
        const target = params[key];
        if (!Array.isArray(target))
            continue;
        target.push(exports.translateParameterObject.call(this, param));
    }
    return {
        body: exports.translateRequestBody.call(this, operation === null || operation === void 0 ? void 0 : operation.requestBody),
        headers: params.header,
        query: params.query,
        cookie: params.cookie,
        path: params.path,
    };
});
//# sourceMappingURL=request.js.map