"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OasPrimitiveTypes = exports.getOperations = exports.getParametersMap = exports.getOperationParameters = exports.getPathItemParameters = exports.getOperation = void 0;
const http_1 = require("./http");
const jsonpointer_1 = require("./jsonpointer");
function getOperation(oas, path, method) {
    return (0, jsonpointer_1.deref)(oas, oas.paths[path])?.[method];
}
exports.getOperation = getOperation;
function getPathItemParameters(oas, pathItem) {
    const params = pathItem.parameters ?? [];
    return params.map((param) => (0, jsonpointer_1.deref)(oas, param));
}
exports.getPathItemParameters = getPathItemParameters;
function getOperationParameters(oas, operation) {
    const params = operation?.parameters ?? [];
    return params.map((param) => (0, jsonpointer_1.deref)(oas, param));
}
exports.getOperationParameters = getOperationParameters;
function getParametersMap(oas, pathParameters, operationParameters) {
    const result = { query: {}, header: {}, path: {}, cookie: {} };
    // path parameters first, to allow them to be overriden
    for (const parameter of pathParameters) {
        const schema = (0, jsonpointer_1.deref)(oas, parameter.schema);
        result[parameter.in][parameter.name] = { ...parameter, schema };
    }
    // potentially override path parameters using ones defined in the operation itself
    for (const parameter of operationParameters) {
        const schema = (0, jsonpointer_1.deref)(oas, parameter.schema);
        result[parameter.in][parameter.name] = { ...parameter, schema };
    }
    return result;
}
exports.getParametersMap = getParametersMap;
function getOperations(oas) {
    const operations = [];
    for (const path of Object.keys(oas.paths)) {
        for (const method of Object.keys(oas.paths[path])) {
            if (http_1.HttpMethods.includes(method)) {
                const operation = getOperation(oas, path, method);
                operations.push([path, method, operation]);
            }
        }
    }
    return operations;
}
exports.getOperations = getOperations;
exports.OasPrimitiveTypes = ["string", "number", "integer", "boolean"];
// export function getParameterType(oas: BundledOpenApiSpec, parameter: OasParameter): OasVaueType {
//   const schema = deref(oas, parameter.schema);
//   if (OasPrimitiveTypes.includes(schema?.type as any)) {
//     return { type: "primitive", value: schema?.type as OasPrimitiveType };
//   } else if (schema?.type === "array") {
//     if (schema.items && OasPrimitiveTypes.includes(schema.items.type as any)) {
//       return { type: "array", items: schema.items.type as OasPrimitiveType };
//     } else {
//       return { type: "array", items: "unknown" };
//     }
//   }
//   return { type: "object" };
// }
//# sourceMappingURL=oas30.js.map